{"version":3,"sources":["App/context.js","App/components/AppBar.jsx","App/components/ConvertingNumber.jsx","RomanNumerals/fromRoman.js","RomanNumerals/constants.js","RomanNumerals/toRoman.js","RomanNumerals/index.js","RomanNumerals/boundlessToRoman.js","App/constants.js","App/components/Hero.jsx","App/components/Result.jsx","App/components/History.jsx","App/App.jsx","reportWebVitals.js","index.js"],"names":["context","createContext","history","displayName","StyledAppBar","styled","MuiAppBar","spacing","theme","AppBar","position","Toolbar","Typography","variant","color","noWrap","StyledConvertingNumber","Container","ConvertingNumber","LinearProgress","VALID_ROMAN_NUMERALS","ROMAN_NUMERALS_TO_ARABIC","I","V","X","L","C","D","M","MAX_ROMAN_NUMERAL","toRN","number","one","five","ten","Array","from","length","join","toRoman","Error","thousands","Math","floor","hundreds","tens","singles","RomanNumerals","boundlessToRoman","value","power","fromRoman","romanNumeral","split","reverse","reduce","acc","singleNumeral","includes","prev","result","undefined","ROMAN_NUMERAL_ENTRY","ARABIC_NUMERAL_ENTRY","StyledHero","div","palette","background","paper","Hero","pushToHistory","useContext","Context","maxWidth","component","align","gutterBottom","paragraph","className","Grid","container","justify","item","TextField","id","label","onChange","event","Number","parseInt","target","to","uniqueId","type","toUpperCase","StyledResult","breakpoints","up","safeToRomanConverter","base","adjustment","Result","roman","convertToTooltip","evaluatedResult","toValue","Tooltip","arrow","title","Card","Wrapper","React","Fragment","wrapperProps","wrapperTooltip","Badge","badgeContent","overlap","StyledHistory","StyledHistoryLabel","History","useState","showMore","setShowMore","latest","direction","xs","onClick","show","Collapse","in","timeout","unmountOnExit","map","entry","index","rest","createMuiTheme","App","converting","setConverting","setHistory","addToHistory","debounce","next","current","contextState","CssBaseline","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a63172eb.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst context = createContext({ history: [[], () => {}] });\ncontext.displayName = 'Roman Numerals converter context';\nexport default context;\n","import styled from 'styled-components';\nimport MuiAppBar from '@material-ui/core/AppBar';\nimport ClassIcon from '@material-ui/icons/Class';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst StyledAppBar = styled(MuiAppBar)`\n    svg {\n        margin-right: ${({ theme: { spacing } }) => spacing(2)}px;\n    }\n`;\n\nfunction AppBar() {\n    return (\n        <StyledAppBar position=\"relative\">\n            <Toolbar>\n                <ClassIcon />\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                    Fun with \"numerals\"\n                </Typography>\n            </Toolbar>\n        </StyledAppBar>\n    );\n}\n\nexport default AppBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst StyledConvertingNumber = styled(Container)`\n    padding: ${({ theme: { spacing } }) => spacing(2, 0)};\n`;\n\nfunction ConvertingNumber() {\n    return (\n        <StyledConvertingNumber>\n            <LinearProgress />\n        </StyledConvertingNumber>\n    );\n}\n\nexport default ConvertingNumber;\n","const VALID_ROMAN_NUMERALS = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\nconst ROMAN_NUMERALS_TO_ARABIC = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n};\n\n/**\n * A function that can convert Roman numerals to Hindu-Arabic numbers\n *\n * @param {string} romanNumeral - The Roman numeral which should be converted\n * @returns {number | undefined} The `Hindu-Arabic` number equivalent\n */\nconst fromRoman = (romanNumeral) => {\n    if (typeof romanNumeral !== 'string' || !romanNumeral) return undefined;\n\n    const { result } = romanNumeral\n        .split('')\n        .reverse()\n        .reduce(\n            (acc, singleNumeral) => {\n                if (!VALID_ROMAN_NUMERALS.includes(singleNumeral)) return acc;\n                let value = ROMAN_NUMERALS_TO_ARABIC[singleNumeral];\n\n                if (acc.prev > value) {\n                    value *= -1;\n                }\n\n                acc.result += value;\n                acc.prev = value;\n\n                return acc;\n            },\n            { result: 0, prev: undefined },\n        );\n\n    return result;\n};\n\nexport default fromRoman;\n","const MAX_ROMAN_NUMERAL = 3999;\n\nexport { MAX_ROMAN_NUMERAL };\n","import { MAX_ROMAN_NUMERAL } from './constants';\n\n/**\n * A function that can be used to construct Roman Numerals between 0 and 10.\n *\n * @param {number} number - A number between 0 and 10\n * @param {{ one: string; five: string; ten: string }} mapper - A \"mapper\" object\n * @returns {string} A string representation of the number using the provided mapper\n */\nconst toRN = (number, { one = 'I', five = 'V', ten = 'X' } = {}) => {\n    if (number < 1) return '';\n    if (number <= 3) return Array.from({ length: number }, () => one).join('');\n    if (number === 4) return `${one}${five}`;\n    if (number === 5) return five;\n    if (number <= 8) return `${five}${Array.from({ length: number - 5 }, () => one).join('')}`;\n    if (number === 9) return `${one}${ten}`;\n    return ten;\n};\n\n/**\n * A function that can convert Hindu-Arabic numbers to Roman numerals\n *\n * @param {number} number - The number which should be converted\n * @returns {string | undefined} The `Roman numeral` equivalent\n */\nconst toRoman = (number) => {\n    if (typeof number !== 'number') return undefined;\n    if (number < 0 || number > MAX_ROMAN_NUMERAL)\n        throw new Error(`\"${number}\" is out of bounds! Roman numerals go up to ${MAX_ROMAN_NUMERAL}!`);\n\n    const thousands = toRN(Math.floor(number / 1000), { one: 'M' });\n\n    const hundreds = toRN(Math.floor((number % 1000) / 100), {\n        one: 'C',\n        five: 'D',\n        ten: 'M',\n    });\n\n    const tens = toRN(Math.floor((number % 100) / 10), {\n        one: 'X',\n        five: 'L',\n        ten: 'C',\n    });\n\n    const singles = toRN(Math.floor(number % 10));\n\n    return `${thousands}${hundreds}${tens}${singles}`;\n};\n\nexport default toRoman;\n","import fromRoman from './fromRoman';\nimport boundlessToRoman from './boundlessToRoman';\nimport toRoman from './toRoman';\n\nconst RomanNumerals = { boundlessToRoman, fromRoman, toRoman };\nexport default RomanNumerals;\n","import { MAX_ROMAN_NUMERAL } from './constants';\nimport toRoman from './toRoman';\n\n/**\n * A function that can convert Hindu-Arabic numbers to Roman numerals.\n * NOTE: The function will return an \"expression\" when the result is out of bounds\n *\n * @param {number} number - The number which should be converted\n * @returns {[string, { value: string, power: number }] | undefined} The `Roman numeral` equivalent\n */\nconst boundlessToRoman = (number) => {\n    if (typeof number !== 'number' || number < 0) return undefined;\n    if (number > MAX_ROMAN_NUMERAL) {\n        return [\n            toRoman(number % MAX_ROMAN_NUMERAL),\n            {\n                value: toRoman(MAX_ROMAN_NUMERAL),\n                power: Math.floor(number / MAX_ROMAN_NUMERAL),\n            },\n        ];\n    }\n\n    return [toRoman(number), { value: '', power: 0 }];\n};\n\nexport default boundlessToRoman;\n","const ROMAN_NUMERAL_ENTRY = 'ROMAN-NUMERAL';\nconst ARABIC_NUMERAL_ENTRY = 'HINDU-ARABIC';\n\nexport { ARABIC_NUMERAL_ENTRY, ROMAN_NUMERAL_ENTRY };\n","import { useContext } from 'react';\nimport uniqueId from 'lodash/uniqueId';\nimport styled from 'styled-components';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport RomanNumerals from '../../RomanNumerals';\nimport Context from '../context';\nimport { ARABIC_NUMERAL_ENTRY, ROMAN_NUMERAL_ENTRY } from '../constants';\n\nconst StyledHero = styled.div`\n    background-color: ${({ theme: { palette } }) => palette.background.paper};\n    padding: ${({ theme: { spacing } }) => spacing(8, 0, 3)};\n\n    .UserInputs {\n        margin: ${({ theme: { spacing } }) => spacing(4, 0)};\n    }\n`;\n\nfunction Hero() {\n    const [, pushToHistory] = useContext(Context).history;\n\n    const handleToRomanChange = (event) => {\n        const from = Number.parseInt(event.target.value);\n        const to = RomanNumerals.boundlessToRoman(from);\n        if (typeof to !== 'undefined')\n            pushToHistory({ id: uniqueId(ROMAN_NUMERAL_ENTRY), type: ROMAN_NUMERAL_ENTRY, from, to });\n    };\n\n    const handleFromRomanChange = (event) => {\n        const from = event.target.value?.toUpperCase();\n        const to = RomanNumerals.fromRoman(from);\n        if (typeof to !== 'undefined')\n            pushToHistory({ id: uniqueId(ARABIC_NUMERAL_ENTRY), type: ARABIC_NUMERAL_ENTRY, from, to: [to] });\n    };\n\n    return (\n        <StyledHero>\n            <Container maxWidth=\"sm\">\n                <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                    Fun with \"numerals\"\n                </Typography>\n                <Typography variant=\"h5\" align=\"justify\" color=\"textSecondary\" paragraph>\n                    Inspired by the great show \"Fun with flags\", this app intends to demonstrate the difference between\n                    Roman numerals and the Hindu-Arabic numbering system.\n                </Typography>\n                <div className=\"UserInputs\">\n                    <Grid container spacing={2} justify=\"center\">\n                        <Grid item>\n                            <TextField\n                                id=\"to-roman\"\n                                label=\"To Roman numeral\"\n                                onChange={handleToRomanChange}\n                                type=\"number\"\n                                variant=\"filled\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                id=\"from-roman\"\n                                label=\"From Roman numeral\"\n                                onChange={handleFromRomanChange}\n                                type=\"text\"\n                                variant=\"filled\"\n                            />\n                        </Grid>\n                    </Grid>\n                </div>\n                <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                    Feel free to change any input to see some action.\n                </Typography>\n            </Container>\n        </StyledHero>\n    );\n}\n\nexport default Hero;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Badge from '@material-ui/core/Badge';\nimport Card from '@material-ui/core/Card';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport RomanNumerals from '../../RomanNumerals';\n\nconst StyledResult = styled(Container)`\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    padding: ${({ theme: { spacing } }) => spacing(2)}px;\n\n    .MuiCard-root {\n        display: flex;\n        justify-content: center;\n        margin: ${({ theme: { spacing } }) => spacing(0, 3)};\n        max-width: ${({ theme: { spacing } }) => spacing(9)}px;\n        padding: ${({ theme: { spacing } }) => spacing(1)}px;\n\n        ${({ theme: { breakpoints } }) => breakpoints.up('md')} {\n            max-width: 150px;\n        }\n    }\n\n    .MuiTypography-root {\n        text-align: center;\n    }\n`;\n\n/**\n * A helper function that will safely try to get a Roman Numeral from a plain number.\n *\n * @param {number} number - The number which should be converted to a Roman Numeral\n * @returns {string} Either the Roman Numeral or a friendly message that it's out of bounds.\n */\nconst safeToRomanConverter = (number) => {\n    const [base, { value: adjustment, power }] = RomanNumerals.boundlessToRoman(number);\n    let result = base;\n\n    if (adjustment) {\n        if (power < 2) result += ` + ${adjustment}`;\n        else result += ` + (${adjustment} x ${power})`;\n    }\n\n    return result;\n};\n\nfunction Result({ from = -1, roman = false, to = [] }) {\n    const convertToTooltip = roman ? RomanNumerals.fromRoman : safeToRomanConverter;\n    const [evaluatedResult, { value: adjustment, power } = {}] = to;\n\n    let toValue = (\n        <Tooltip arrow title={convertToTooltip(evaluatedResult)}>\n            <Card>\n                <Typography component=\"span\">{evaluatedResult}</Typography>\n            </Card>\n        </Tooltip>\n    );\n\n    if (power > 0) {\n        let Wrapper = React.Fragment;\n        let wrapperProps = {};\n        let wrapperTooltip = convertToTooltip(adjustment);\n\n        if (power > 1) {\n            Wrapper = Badge;\n            wrapperProps = {\n                badgeContent: `x ${power}`,\n                color: 'secondary',\n                component: 'div',\n                overlap: 'circle',\n            };\n\n            wrapperTooltip = `${wrapperTooltip} x ${power} = ${wrapperTooltip * power}`;\n        }\n\n        toValue = (\n            <>\n                <Tooltip arrow title={convertToTooltip(evaluatedResult)}>\n                    <Card>\n                        <Typography component=\"span\">{evaluatedResult}</Typography>\n                    </Card>\n                </Tooltip>\n                <Typography component=\"span\">+</Typography>\n                <Wrapper {...wrapperProps}>\n                    <Tooltip arrow title={wrapperTooltip}>\n                        <Card>\n                            <Typography component=\"span\">{adjustment}</Typography>\n                        </Card>\n                    </Tooltip>\n                </Wrapper>\n            </>\n        );\n    }\n\n    return (\n        <StyledResult>\n            <Card>\n                <Typography component=\"span\">{from}</Typography>\n            </Card>\n            <Typography component=\"span\"> = </Typography>\n            {toValue}\n        </StyledResult>\n    );\n}\n\nResult.displayName = '\"Fun with numbers\" result';\nResult.propTypes = {\n    roman: PropTypes.bool,\n    from: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    to: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.shape({\n                power: PropTypes.number.isRequired,\n                value: PropTypes.string.isRequired,\n            }),\n        ]),\n    ).isRequired,\n};\n\nexport { StyledResult };\nexport default Result;\n","import React, { useContext, useState } from 'react';\nimport styled from 'styled-components';\n\nimport Collapse from '@material-ui/core/Collapse';\nimport Container from '@material-ui/core/Container';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport Context from '../context';\nimport { ROMAN_NUMERAL_ENTRY } from '../constants';\nimport Result from './Result';\n\nconst StyledHistory = styled(Container)`\n    padding: ${({ theme: { spacing } }) => spacing(2, 0, 4)};\n\n    .MuiGrid-item {\n        word-break: break-all;\n\n        &:first-child span {\n            font-weight: 500;\n        }\n    }\n`;\n\nconst StyledHistoryLabel = styled(Typography)`\n    align-items: center;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    margin: ${({ theme: { spacing } }) => spacing(2, 0)};\n`;\n\nfunction History() {\n    const [showMore, setShowMore] = useState(false);\n    const [history] = useContext(Context).history;\n    const [latest] = history;\n\n    const toggleShowMore = () => setShowMore((show) => !show);\n\n    if (history.length < 1) return null;\n\n    return (\n        <StyledHistory maxWidth=\"md\">\n            <Grid container direction=\"column\" justify=\"center\" spacing={2}>\n                {latest && (\n                    <Grid item key={latest.id} xs={12}>\n                        <Result roman={latest.type === ROMAN_NUMERAL_ENTRY} {...latest} />\n                    </Grid>\n                )}\n            </Grid>\n\n            {history.length > 1 && (\n                <>\n                    <StyledHistoryLabel align=\"center\" onClick={toggleShowMore}>\n                        History\n                        {showMore ? <ExpandLess /> : <ExpandMore />}\n                    </StyledHistoryLabel>\n                    <Collapse in={showMore} timeout=\"auto\" unmountOnExit>\n                        <Grid container direction=\"column\" justify=\"center\" spacing={2}>\n                            {history.map((entry, index) => {\n                                const { id, type, ...rest } = entry;\n                                return (\n                                    !!index && (\n                                        <Grid item key={id} xs={12}>\n                                            <Result roman={type === ROMAN_NUMERAL_ENTRY} {...rest} />\n                                        </Grid>\n                                    )\n                                );\n                            })}\n                        </Grid>\n                    </Collapse>\n                </>\n            )}\n        </StyledHistory>\n    );\n}\n\nexport default History;\n","import { useState } from 'react';\nimport debounce from 'lodash/debounce';\n\nimport { ThemeProvider } from 'styled-components';\nimport { createMuiTheme, ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Context from './context';\nimport AppBar from './components/AppBar';\nimport ConvertingNumber from './components/ConvertingNumber';\nimport Hero from './components/Hero';\nimport History from './components/History';\n\nconst theme = createMuiTheme();\n\nfunction App() {\n    const [converting, setConverting] = useState(false);\n    const [history, setHistory] = useState([]);\n\n    const addToHistory = debounce((next) => {\n        setHistory((current) => [next, ...current]);\n        setConverting(false);\n    }, 500);\n\n    const contextState = {\n        history: [\n            history,\n            (next) => {\n                setConverting(true);\n                addToHistory(next);\n            },\n        ],\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline />\n                <Context.Provider value={contextState}>\n                    <AppBar />\n                    <main>\n                        <Hero />\n                        {converting && <ConvertingNumber />}\n                        <History />\n                    </main>\n                </Context.Provider>\n            </MuiThemeProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}