{"version":3,"sources":["App/components/AppBar.jsx","App/context.js","RomanNumerals/fromRoman.js","RomanNumerals/toRoman.js","RomanNumerals/index.js","App/helpers/fromRoman.js","App/constants.js","App/helpers/toRoman.js","App/components/Hero.jsx","App/components/History.jsx","App/App.jsx","reportWebVitals.js","index.js"],"names":["StyledAppBar","styled","MuiAppBar","spacing","theme","AppBar","position","Toolbar","Typography","variant","color","noWrap","context","createContext","history","displayName","VALID_ROMAN_NUMERALS","ROMAN_NUMERALS_TO_ARABIC","I","V","X","L","C","D","M","toRN","number","one","five","ten","Array","from","length","join","RomanNumerals","fromRoman","romanNumeral","split","reverse","reduce","acc","singleNumeral","includes","value","prev","result","undefined","toRoman","Error","thousands","Math","floor","hundreds","tens","singles","MAX_ROMAN_NUMERAL","MAX_TO_ROMAN_NUMERAL","ROMAN_NUMERAL_ENTRY","ARABIC_NUMERAL_ENTRY","max","onOutOfBounds","alert","values","next","push","abs","StyledHero","div","palette","background","paper","Hero","pushToHistory","useContext","Context","Container","maxWidth","component","align","gutterBottom","paragraph","className","Grid","container","justify","item","TextField","id","label","onChange","event","Number","parseInt","target","uniqueId","type","toUpperCase","StyledResult","breakpoints","up","StyledHistory","Result","roman","to","convertToTooltip","resultValueConfig","adjustment","multiplier","toValue","Tooltip","arrow","title","Card","Wrapper","React","Fragment","wrapperProps","wrapperTooltip","Badge","badgeContent","overlap","History","direction","map","entry","xs","createMuiTheme","App","useState","setHistory","contextState","debounce","current","CssBaseline","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3b173fd.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport MuiAppBar from '@material-ui/core/AppBar';\nimport ClassIcon from '@material-ui/icons/Class';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst StyledAppBar = styled(MuiAppBar)`\n    svg {\n        margin-right: ${({ theme: { spacing } }) => spacing(2)}px;\n    }\n`;\n\nfunction AppBar() {\n    return (\n        <StyledAppBar position=\"relative\">\n            <Toolbar>\n                <ClassIcon />\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                    Fun with \"numerals\"\n                </Typography>\n            </Toolbar>\n        </StyledAppBar>\n    );\n}\n\nexport default AppBar;\n","import { createContext } from 'react';\n\nconst context = createContext({ history: [[], () => {}] });\ncontext.displayName = 'Roman Numerals converter context';\nexport default context;\n","const VALID_ROMAN_NUMERALS = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\nconst ROMAN_NUMERALS_TO_ARABIC = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n};\n\n/**\n * A function that can convert Roman numerals to Hindu-Arabic numbers\n *\n * @param {string} romanNumeral - The Roman numeral which should be converted\n * @returns {number | undefined} The `Hindu-Arabic` number equivalent\n */\nconst fromRoman = (romanNumeral) => {\n    if (typeof romanNumeral !== 'string' || !romanNumeral) return undefined;\n\n    const { result } = romanNumeral\n        .split('')\n        .reverse()\n        .reduce(\n            (acc, singleNumeral) => {\n                if (!VALID_ROMAN_NUMERALS.includes(singleNumeral)) return acc;\n                let value = ROMAN_NUMERALS_TO_ARABIC[singleNumeral];\n\n                if (acc.prev > value) {\n                    value *= -1;\n                }\n\n                acc.result += value;\n                acc.prev = value;\n\n                return acc;\n            },\n            { result: 0, prev: undefined },\n        );\n\n    return result;\n};\n\nexport default fromRoman;\n","/**\n * A function that can be used to construct Roman Numerals between 0 and 10.\n *\n * @param {number} number - A number between 0 and 10\n * @param {{ one: string; five: string; ten: string }} mapper - A \"mapper\" object\n * @returns {string} A string representation of the number using the provided mapper\n */\nconst toRN = (number, { one = 'I', five = 'V', ten = 'X' } = {}) => {\n    if (number < 1) return '';\n    if (number <= 3) return Array.from({ length: number }, () => one).join('');\n    if (number === 4) return `${one}${five}`;\n    if (number === 5) return five;\n    if (number <= 8) return `${five}${Array.from({ length: number - 5 }, () => one).join('')}`;\n    if (number === 9) return `${one}${ten}`;\n    return ten;\n};\n\n/**\n * A function that can convert Hindu-Arabic numbers to Roman numerals\n *\n * @param {number} number - The number which should be converted\n * @returns {string | undefined} The `Roman numeral` equivalent\n */\nconst toRoman = (number) => {\n    if (typeof number !== 'number') return undefined;\n    if (number < 0 || number > 3999) throw new Error(`\"${number}\" is out of bounds! Roman numerals go up to 3999!`);\n\n    const thousands = toRN(Math.floor(number / 1000), { one: 'M' });\n\n    const hundreds = toRN(Math.floor((number % 1000) / 100), {\n        one: 'C',\n        five: 'D',\n        ten: 'M',\n    });\n\n    const tens = toRN(Math.floor((number % 100) / 10), {\n        one: 'X',\n        five: 'L',\n        ten: 'C',\n    });\n\n    const singles = toRN(Math.floor(number % 10));\n\n    return `${thousands}${hundreds}${tens}${singles}`;\n};\n\nexport default toRoman;\n","import fromRoman from './fromRoman';\nimport toRoman from './toRoman';\n\nconst RomanNumerals = { fromRoman, toRoman };\nexport default RomanNumerals;\n","import RomanNumerals from '../../RomanNumerals';\n\n/**\n * A helper function that can generate Hindu-Arabic.\n *\n * @param {string} value - The number which should be converted\n * @returns {[string, number | undefined]} An array of Roman Numerals\n */\nconst fromRoman = (value) => [value, RomanNumerals.fromRoman(value)];\n\nexport default fromRoman;\n","const MAX_ROMAN_NUMERAL = 3999;\nconst MAX_TO_ROMAN_NUMERAL = 1000000;\nconst ROMAN_NUMERAL_ENTRY = 'ROMAN-NUMERAL';\nconst ARABIC_NUMERAL_ENTRY = 'HINDU-ARABIC';\n\nexport { ARABIC_NUMERAL_ENTRY, MAX_ROMAN_NUMERAL, MAX_TO_ROMAN_NUMERAL, ROMAN_NUMERAL_ENTRY };\n","import RomanNumerals from '../../RomanNumerals';\nimport { MAX_ROMAN_NUMERAL, MAX_TO_ROMAN_NUMERAL } from '../constants';\n\n/**\n * A helper function that can \"safely\" generate Roman Numerals.\n *\n * @param {number} value - The number which should be converted to a Roman Numeral\n * @param {() => void} onOutOfBounds - A function to fire when out of bounds.\n * @returns {string[] | undefined} An array of Roman Numerals\n */\nconst toRoman = (\n    value,\n    { max = MAX_TO_ROMAN_NUMERAL, onOutOfBounds = () => alert('Really going out of bounds there...') } = {},\n) => {\n    const values = [];\n    let next = value;\n\n    if (value > max) {\n        onOutOfBounds();\n        return undefined;\n    }\n\n    while (MAX_ROMAN_NUMERAL < next) {\n        values.push(RomanNumerals.toRoman(MAX_ROMAN_NUMERAL));\n        next = Math.abs(next - MAX_ROMAN_NUMERAL);\n    }\n\n    values.push(RomanNumerals.toRoman(next));\n    return [value, values];\n};\n\nexport default toRoman;\n","import { useContext } from 'react';\nimport uniqueId from 'lodash/uniqueId';\nimport styled from 'styled-components';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport Context from '../context';\nimport fromRoman from '../helpers/fromRoman';\nimport toRoman from '../helpers/toRoman';\nimport { ARABIC_NUMERAL_ENTRY, ROMAN_NUMERAL_ENTRY } from '../constants';\n\nconst StyledHero = styled.div`\n    background-color: ${({ theme: { palette } }) => palette.background.paper};\n    padding: ${({ theme: { spacing } }) => spacing(8, 0, 3)};\n\n    .UserInputs {\n        margin: ${({ theme: { spacing } }) => spacing(4, 0)};\n    }\n`;\n\nfunction Hero() {\n    const [, pushToHistory] = useContext(Context).history;\n\n    const handleToRomanChange = (event) => {\n        const values = toRoman(Number.parseInt(event.target.value));\n        if (values) pushToHistory({ id: uniqueId(ROMAN_NUMERAL_ENTRY), type: ROMAN_NUMERAL_ENTRY, values });\n    };\n\n    const handleFromRomanChange = (event) => {\n        const values = fromRoman(event.target.value?.toUpperCase());\n        if (values) pushToHistory({ id: uniqueId(ARABIC_NUMERAL_ENTRY), type: ARABIC_NUMERAL_ENTRY, values });\n    };\n\n    return (\n        <StyledHero>\n            <Container maxWidth=\"sm\">\n                <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                    Fun with \"numerals\"\n                </Typography>\n                <Typography variant=\"h5\" align=\"justify\" color=\"textSecondary\" paragraph>\n                    Inspired by the great show \"Fun with flags\", this app intends to demonstrate the difference between\n                    Roman numerals and the Hindu-Arabic numbering system.\n                </Typography>\n                <div className=\"UserInputs\">\n                    <Grid container spacing={2} justify=\"center\">\n                        <Grid item>\n                            <TextField\n                                id=\"to-roman\"\n                                label=\"To Roman numeral\"\n                                onChange={handleToRomanChange}\n                                type=\"number\"\n                                variant=\"filled\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                id=\"from-roman\"\n                                label=\"From Roman numeral\"\n                                onChange={handleFromRomanChange}\n                                type=\"text\"\n                                variant=\"filled\"\n                            />\n                        </Grid>\n                    </Grid>\n                </div>\n                <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                    Feel free to change any input to see some action.\n                </Typography>\n            </Container>\n        </StyledHero>\n    );\n}\n\nexport default Hero;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\n\nimport Badge from '@material-ui/core/Badge';\nimport Card from '@material-ui/core/Card';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport RomanNumerals from '../../RomanNumerals';\nimport Context from '../context';\nimport { ROMAN_NUMERAL_ENTRY } from '../constants';\n\nconst StyledResult = styled(Container)`\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    padding: ${({ theme: { spacing } }) => spacing(2)}px;\n\n    .MuiCard-root {\n        display: flex;\n        justify-content: center;\n        margin: ${({ theme: { spacing } }) => spacing(0, 3)};\n        max-width: ${({ theme: { spacing } }) => spacing(9)}px;\n        padding: ${({ theme: { spacing } }) => spacing(1)}px;\n\n        ${({ theme: { breakpoints } }) => breakpoints.up('md')} {\n            max-width: 150px;\n        }\n    }\n`;\n\nconst StyledHistory = styled(Container)`\n    padding: ${({ theme: { spacing } }) => spacing(2, 0, 4)};\n\n    .MuiGrid-item {\n        word-break: break-all;\n\n        &:last-child span {\n            font-weight: 500;\n        }\n    }\n`;\n\nfunction Result({ from = -1, roman = false, to = [] }) {\n    const convertToTooltip = roman ? RomanNumerals.fromRoman : RomanNumerals.toRoman;\n    const resultValueConfig = {\n        adjustment: to[0], // Either the MAX RN or the actual value\n        multiplier: to.length - 2, // How many times does it go over the limit\n        value: to[to.length - 1], // The last item in the stack is always the user's result\n    };\n\n    let toValue = (\n        <Tooltip arrow title={convertToTooltip(resultValueConfig.adjustment)}>\n            <Card>\n                <Typography component=\"span\">{resultValueConfig.value}</Typography>\n            </Card>\n        </Tooltip>\n    );\n\n    if (resultValueConfig.multiplier > 0) {\n        let Wrapper = React.Fragment;\n        let wrapperProps = {};\n        let wrapperTooltip = convertToTooltip(resultValueConfig.adjustment);\n\n        if (resultValueConfig.multiplier > 1) {\n            Wrapper = Badge;\n            wrapperProps = {\n                badgeContent: `x${resultValueConfig.multiplier}`,\n                color: 'secondary',\n                component: 'div',\n                overlap: 'circle',\n            };\n\n            wrapperTooltip = `${wrapperTooltip} x ${resultValueConfig.multiplier} = ${\n                wrapperTooltip * resultValueConfig.multiplier\n            }`;\n        }\n\n        toValue = (\n            <>\n                <Tooltip arrow title={convertToTooltip(resultValueConfig.value)}>\n                    <Card>\n                        <Typography component=\"span\">{resultValueConfig.value}</Typography>\n                    </Card>\n                </Tooltip>\n                <Typography component=\"span\">+</Typography>\n                <Wrapper {...wrapperProps}>\n                    <Tooltip arrow title={wrapperTooltip}>\n                        <Card>\n                            <Typography component=\"span\">{resultValueConfig.adjustment}</Typography>\n                        </Card>\n                    </Tooltip>\n                </Wrapper>\n            </>\n        );\n    }\n\n    return (\n        <StyledResult>\n            <Card>\n                <Typography component=\"span\">{from}</Typography>\n            </Card>\n            <Typography component=\"span\"> = </Typography>\n            {toValue}\n        </StyledResult>\n    );\n}\n\nfunction History() {\n    const [history] = useContext(Context).history;\n\n    return (\n        <StyledHistory maxWidth=\"md\">\n            <Grid container direction=\"column-reverse\" justify=\"center\" spacing={2}>\n                {history.reverse().map((entry) => {\n                    const { id, type, values } = entry;\n                    const toValue = type === ROMAN_NUMERAL_ENTRY ? values[1] : [values[1]];\n\n                    return (\n                        <Grid item key={id} xs={12}>\n                            <Result from={values[0]} roman={type === ROMAN_NUMERAL_ENTRY} to={toValue} />\n                        </Grid>\n                    );\n                })}\n            </Grid>\n        </StyledHistory>\n    );\n}\n\nexport default History;\n","import { useState } from 'react';\nimport debounce from 'lodash/debounce';\n\nimport { ThemeProvider } from 'styled-components';\nimport { createMuiTheme, ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\n\nimport AppBar from './components/AppBar';\nimport Context from './context';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Hero from './components/Hero';\nimport History from './components/History';\n\nconst theme = createMuiTheme();\n\nfunction App() {\n    const [history, setHistory] = useState([]);\n    const contextState = {\n        history: [history, debounce((next) => setHistory((current) => [...current, next]), 250)],\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline />\n                <Context.Provider value={contextState}>\n                    <AppBar />\n                    <main>\n                        <Hero />\n                        <History />\n                    </main>\n                </Context.Provider>\n            </MuiThemeProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}